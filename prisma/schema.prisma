// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  plan      Plan     @default(FREE)
  avatar    String?
  phone     String?
  
  // Estatísticas do usuário
  totalWinnings     Float    @default(0)
  tournamentsWon    Int      @default(0)
  tournamentsPlayed Int      @default(0)
  currentRanking    Int?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relacionamentos
  accounts        Account[]
  sessions        Session[]
  participations  TournamentParticipation[]
  transactions    Transaction[]
  subscriptions   Subscription[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Tournament {
  id               String            @id @default(cuid())
  title            String
  description      String?
  category         TournamentCategory
  price            Float
  maxParticipants  Int
  prize            String
  prizeAmount      Float
  deadline         DateTime
  startDate        DateTime?
  endDate          DateTime?
  status           TournamentStatus  @default(ACTIVE)
  
  // Configurações do torneio
  rules            String?           @db.Text
  requirements     String?
  isVisible        Boolean           @default(true)
  isFeatured       Boolean           @default(false)
  
  // Timestamps
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relacionamentos
  participations   TournamentParticipation[]
  transactions     Transaction[]
  
  @@map("tournaments")
}

model TournamentParticipation {
  id           String    @id @default(cuid())
  userId       String
  tournamentId String
  position     Int?
  score        Float?
  isWinner     Boolean   @default(false)
  joinedAt     DateTime  @default(now())
  
  // Relacionamentos
  user         User      @relation(fields: [userId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  
  @@unique([userId, tournamentId])
  @@map("tournament_participations")
}

model Transaction {
  id           String            @id @default(cuid())
  userId       String
  tournamentId String?
  type         TransactionType
  amount       Float
  status       TransactionStatus @default(PENDING)
  method       PaymentMethod
  
  // Dados PIX
  pixKey       String?
  pixQrCode    String?           @db.Text
  pixCode      String?
  pixExpiry    DateTime?
  
  // Metadados
  description  String?
  reference    String?
  externalId   String?           @unique
  
  // Timestamps
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  
  // Relacionamentos
  user         User              @relation(fields: [userId], references: [id])
  tournament   Tournament?       @relation(fields: [tournamentId], references: [id])
  
  @@map("transactions")
}

model Subscription {
  id        String           @id @default(cuid())
  userId    String
  plan      Plan
  status    SubscriptionStatus @default(ACTIVE)
  amount    Float
  startDate DateTime         @default(now())
  endDate   DateTime?
  
  // Dados de pagamento
  paymentMethod PaymentMethod?
  lastPayment   DateTime?
  nextPayment   DateTime?
  
  // Timestamps
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  
  // Relacionamentos
  user      User             @relation(fields: [userId], references: [id])
  
  @@map("subscriptions")
}

model AdminLog {
  id        String   @id @default(cuid())
  adminId   String
  action    String
  entity    String
  entityId  String?
  details   Json?
  createdAt DateTime @default(now())
  
  @@map("admin_logs")
}

// Enums
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum Plan {
  FREE
  PRATA
  OURO
  DIAMANTE
}

enum TournamentCategory {
  DIAMANTE
  OURO
  PRATA
  ESPECIAL
}

enum TournamentStatus {
  ACTIVE
  FULL
  FINISHED
  CANCELLED
  DRAFT
}

enum TransactionType {
  TOURNAMENT_ENTRY
  PRIZE_PAYMENT
  SUBSCRIPTION
  REFUND
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
}